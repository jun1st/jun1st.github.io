{"expireTime":9007200844525421000,"key":"transformer-remark-markdown-html-7c5a4e5442b20e58eb8b94cee547146f-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<p><a href=\"https://medium.com/@fengqijun/%C3%A4%C2%BD%C2%BF%C3%A7%C2%94%C2%A8-spring-cloud-%C3%A6%C2%9E%C2%84%C3%A5%C2%BB%C2%BA%C3%A5%C2%BE%C2%AE%C3%A6%C2%9C%C2%8D%C3%A5%C2%8A%C2%A1%C3%A4%C2%B9%C2%8B%C3%A4%C2%BA%C2%8C-eureka-client-acd6022f94df\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">上一篇</a>\n注册了一个简单的 Servcie，这一篇讲一下使用 RestTemplate 来调用注册在 Eureka 上的服务。</p>\n<p><strong>Service Provider</strong></p>\n<p>先给 Service Provider 写一个简单的返回一个 Json 对象的 Api，Greeting</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> lombok<span class=\"token punctuation\">.</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>experimental</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Accessors</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@Accessors</span><span class=\"token punctuation\">(</span>chain <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Greeting</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Root Api 直接返回一个 Greeting 对象</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HomeController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Greeting</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Greeting</span> greeting <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Greeting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        greeting<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jon\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"How are you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> greeting<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>结果：</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*VFC-nfRVnVVhvBZ_wMzTvA.png\"></p>\n<p>微服务提供方已经 Ready。</p>\n<p><strong>Service Consumer</strong></p>\n<p>同样也是一个 Spring Boot 应用，同时也是 Eureka 的一个 Client。作为调用方，她是一个使用者。至于是否作为一个服务提供者，可以自由选择。</p>\n<p>同样是通过 <code class=\"language-text\">application.properties</code> 配置 eureka 属性</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server.port=8002\n\nspring.application.name=service-consumer\n\neureka.client.register-with-eureka=true\neureka.client.enabled=true\neureka.client.serviceUrl.defaultZone=http://localhost:8000/eureka\neureka.instance.prefer-ip-address=true</code></pre></div>\n<p>这里设置 <code class=\"language-text\">register-with-eureka</code> 为 <code class=\"language-text\">true</code>，就会把 service-consumer 也注册为一个服务提供方。</p>\n<p>可以看到 Service Consumer 也注册进 Eureka 了。\n<img src=\"https://cdn-images-1.medium.com/max/1600/1*dEKBzhYAcTZY4e-INBBVfg.png\"></p>\n<p><strong>Eureka Services 之间如何通讯</strong></p>\n<p>有一个说法说 CS 有两个难题，一个是变量命名，另一个是 <code class=\"language-text\">Cache Invalidation</code>。 还有一个说话是，CS\n中的问题，没有一个是不能通过加一层来解决了。这个 Eureka Server 就相当于是中间加的一层。</p>\n<p>Consumer 调用 Provider</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HomeController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/call-provider\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://SERVICE-PROVIDER\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@LoadBalanced</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplateBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里个 <code class=\"language-text\">Consumer</code> 添加了一个 <code class=\"language-text\">/call-provider</code> 方法，在方法内，通过 RestTemplate，调用了 provider 的 Api。\n这里并没有使用 Url 地址或者 IP 地址，而是使用了注册在 Eureka Server 上的 application name，并且成功的得到了返回结果。</p>\n<p><code class=\"language-text\">RestTemplate</code> 的 <code class=\"language-text\">LoadBalanced</code> 注解来自 Spring Cloud 的 Ribbon 依赖。 Ribbon 是用来干什么的？\n下篇再见～</p>\n<p><a href=\"https://github.com/jun1st/service-consumer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">源代码地址</a></p>"}