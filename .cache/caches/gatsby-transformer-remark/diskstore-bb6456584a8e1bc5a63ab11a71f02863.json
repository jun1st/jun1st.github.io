{"expireTime":9007200864318436000,"key":"transformer-remark-markdown-ast-be4e944de948fca7c3f0ab293ba700de-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"link","url":"#消费者组","title":null,"data":{"hProperties":{"aria-hidden":true,"class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"消费者组","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":8,"offset":8},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":8,"offset":8},"indent":[]},"data":{"id":"消费者组","htmlAttributes":{"id":"消费者组"},"hProperties":{"id":"消费者组"}}},{"type":"paragraph","children":[{"type":"text","value":"消费者组是 Kafka 独有的概念。官网上的介绍言简意赅，即消费者组是 Kafka 提供的可扩展且具有容错性的消费者机制。 ","position":{"start":{"line":4,"column":1,"offset":10},"end":{"line":4,"column":63,"offset":72},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":10},"end":{"line":4,"column":63,"offset":72},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"但实际上，消费者组（Consumer Group）其实包含两个概念。","position":{"start":{"line":6,"column":1,"offset":74},"end":{"line":6,"column":35,"offset":108},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":74},"end":{"line":6,"column":35,"offset":108},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"作为队列，消费者组允许你分割数据处理到一组进程集合上（即一个消费者组中可以包含多个消费者进程，他们共同消费该topic的数据），这有助于你的消费能力的动态调整；","position":{"start":{"line":8,"column":1,"offset":110},"end":{"line":8,"column":81,"offset":190},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":110},"end":{"line":8,"column":81,"offset":190},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"作为发布-订阅模型（publish-subscribe），Kafka允许你将同一份消息广播到多个消费者组里，以此来丰富多种数据使用场景。","position":{"start":{"line":10,"column":1,"offset":192},"end":{"line":10,"column":69,"offset":260},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":192},"end":{"line":10,"column":69,"offset":260},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"通俗一点讲，一个消费者组，可以有多个消费者，是一个逻辑处理单元。 当一个组订阅一个 Topic 时， Topic 中的一条 Message， 只会被组中的某一个消费者消费。如果","position":{"start":{"line":12,"column":1,"offset":262},"end":{"line":12,"column":89,"offset":350},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":262},"end":{"line":12,"column":89,"offset":350},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#在-kafka-中，zookeeper的作用是什么？","title":null,"data":{"hProperties":{"aria-hidden":true,"class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"在 Kafka 中，ZooKeeper的作用是什么？","position":{"start":{"line":15,"column":4,"offset":356},"end":{"line":15,"column":30,"offset":382},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":353},"end":{"line":15,"column":30,"offset":382},"indent":[]},"data":{"id":"在-kafka-中，zookeeper的作用是什么？","htmlAttributes":{"id":"在-kafka-中，zookeeper的作用是什么？"},"hProperties":{"id":"在-kafka-中，zookeeper的作用是什么？"}}},{"type":"paragraph","children":[{"type":"text","value":"任何分布式系统中虽然都通过一些列的算法去除了传统的关系型数据存储，但是毕竟还是有些数据要存储的，同时分布式系统的特性往往是需要有一些中间人角色来统筹集群。比如我们在整个微服务框架中的Dubbo，它也是需要依赖一些注册中心或配置中心类的中间件的，以及云原生的Kubernetes使用etcd作为整个集群的枢纽。","position":{"start":{"line":17,"column":1,"offset":384},"end":{"line":17,"column":155,"offset":538},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":384},"end":{"line":17,"column":155,"offset":538},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"目前，Kafka使用ZooKeeper存放集群元数据、成员管理、Controller选举，以及其他一些管理类任务。之后，等KIP-500提案完成后，Kafka将完全不再依赖于ZooKeeper。","position":{"start":{"line":19,"column":1,"offset":540},"end":{"line":19,"column":98,"offset":637},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":540},"end":{"line":19,"column":98,"offset":637},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"“存放元数据”是指主题分区的所有数据都保存在 ZooKeeper 中，且以它保存的数据为权威，其他 “人” 都要与它保持对齐。","position":{"start":{"line":21,"column":3,"offset":641},"end":{"line":21,"column":66,"offset":704},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":641},"end":{"line":21,"column":66,"offset":704},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":639},"end":{"line":21,"column":66,"offset":704},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"“成员管理” 是指 Broker 节点的注册、注销以及属性变更，等等。","position":{"start":{"line":22,"column":3,"offset":707},"end":{"line":22,"column":38,"offset":742},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":707},"end":{"line":22,"column":38,"offset":742},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":705},"end":{"line":22,"column":38,"offset":742},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"“Controller 选举” 是指选举集群 Controller，而其他管理类任务包括但不限于主题删除、参数配置等","position":{"start":{"line":23,"column":3,"offset":745},"end":{"line":23,"column":61,"offset":803},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":745},"end":{"line":23,"column":61,"offset":803},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":743},"end":{"line":23,"column":61,"offset":803},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":639},"end":{"line":23,"column":61,"offset":803},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"KIP-500 思想，是使用社区自研的基于 Raft 的共识算法，替代 ZooKeeper，实现Controller自选举。","position":{"start":{"line":25,"column":1,"offset":805},"end":{"line":25,"column":63,"offset":867},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":805},"end":{"line":25,"column":63,"offset":867},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#kafka-能手动删除消息吗？","title":null,"data":{"hProperties":{"aria-hidden":true,"class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Kafka 能手动删除消息吗？","position":{"start":{"line":27,"column":4,"offset":872},"end":{"line":27,"column":19,"offset":887},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":869},"end":{"line":27,"column":19,"offset":887},"indent":[]},"data":{"id":"kafka-能手动删除消息吗？","htmlAttributes":{"id":"kafka-能手动删除消息吗？"},"hProperties":{"id":"kafka-能手动删除消息吗？"}}},{"type":"paragraph","children":[{"type":"text","value":"Kafka不需要用户手动删除消息。它本身提供了留存策略，能够自动删除过期消息。当然，它是支持手动删除消息的。","position":{"start":{"line":29,"column":1,"offset":889},"end":{"line":29,"column":55,"offset":943},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":889},"end":{"line":29,"column":55,"offset":943},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"对于设置了 Key 且参数 cleanup.policy=compact 的主题而言，我们可以构造一条 的消息发送给 Broker，依靠 Log Cleaner 组件提供的功能删除掉该 Key 的消息。","position":{"start":{"line":31,"column":3,"offset":947},"end":{"line":31,"column":104,"offset":1048},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":947},"end":{"line":31,"column":104,"offset":1048},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":945},"end":{"line":31,"column":104,"offset":1048},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"对于普通主题而言，我们可以使用 kafka-delete-records 命令，或编写程序调用 Admin.deleteRecords 方法来删除消息。这两种方法殊途同归，底层都是调用 Admin 的 deleteRecords 方法，通过将分区 Log Start Offset 值抬高的方式间接删除消息。","position":{"start":{"line":32,"column":3,"offset":1051},"end":{"line":32,"column":157,"offset":1205},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":1051},"end":{"line":32,"column":157,"offset":1205},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1049},"end":{"line":32,"column":157,"offset":1205},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":945},"end":{"line":32,"column":157,"offset":1205},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#_consumeroffsets__-是做什么用的？","title":null,"data":{"hProperties":{"aria-hidden":true,"class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"_","position":{"start":{"line":35,"column":5,"offset":1212},"end":{"line":35,"column":6,"offset":1213},"indent":[]}},{"type":"strong","children":[{"type":"emphasis","children":[{"type":"text","value":"consumer","position":{"start":{"line":35,"column":9,"offset":1216},"end":{"line":35,"column":17,"offset":1224},"indent":[]}}],"position":{"start":{"line":35,"column":8,"offset":1215},"end":{"line":35,"column":18,"offset":1225},"indent":[]}},{"type":"text","value":"offsets__","position":{"start":{"line":35,"column":18,"offset":1225},"end":{"line":35,"column":27,"offset":1234},"indent":[]}}],"position":{"start":{"line":35,"column":6,"offset":1213},"end":{"line":35,"column":29,"offset":1236},"indent":[]}},{"type":"text","value":" 是做什么用的？","position":{"start":{"line":35,"column":29,"offset":1236},"end":{"line":35,"column":37,"offset":1244},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1208},"end":{"line":35,"column":37,"offset":1244},"indent":[]},"data":{"id":"_consumeroffsets__-是做什么用的？","htmlAttributes":{"id":"_consumeroffsets__-是做什么用的？"},"hProperties":{"id":"_consumeroffsets__-是做什么用的？"}}},{"type":"paragraph","children":[{"type":"text","value":"这是一个内部主题，主要用于存储消费者的偏移量，以及消费者的元数据信息（消费者实例，消费者id等等）","position":{"start":{"line":37,"column":1,"offset":1246},"end":{"line":37,"column":50,"offset":1295},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1246},"end":{"line":37,"column":50,"offset":1295},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"需要注意的是：Kafka 的 GroupCoordinator 组件提供对该主题完整的管理功能，包括该主题的创建、写入、读取和 Leader 维护等。","position":{"start":{"line":39,"column":1,"offset":1297},"end":{"line":39,"column":76,"offset":1372},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1297},"end":{"line":39,"column":76,"offset":1372},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#分区-leader-选举策略","title":null,"data":{"hProperties":{"aria-hidden":true,"class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"分区 Leader 选举策略","position":{"start":{"line":41,"column":4,"offset":1377},"end":{"line":41,"column":18,"offset":1391},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1374},"end":{"line":41,"column":19,"offset":1392},"indent":[]},"data":{"id":"分区-leader-选举策略","htmlAttributes":{"id":"分区-leader-选举策略"},"hProperties":{"id":"分区-leader-选举策略"}}},{"type":"paragraph","children":[{"type":"text","value":"分区的 Leader 选举对用户是完全透明的，它是由 Controller 独立完成的。","position":{"start":{"line":43,"column":1,"offset":1394},"end":{"line":43,"column":45,"offset":1438},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":1394},"end":{"line":43,"column":45,"offset":1438},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"OfflinePartition Leader 选举：每当有分区上线时，就需要执行 Leader 选举。所谓的分区上线，可能是创建了新分区，也可能是之前的下线分区重新上线。这是最常见的分区Leader选举场景。","position":{"start":{"line":45,"column":3,"offset":1442},"end":{"line":45,"column":108,"offset":1547},"indent":[]}}],"position":{"start":{"line":45,"column":3,"offset":1442},"end":{"line":45,"column":108,"offset":1547},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1440},"end":{"line":45,"column":108,"offset":1547},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"ReassignPartition Leader 选举：当你手动运行 kafka-reassign-partitions 命令，或者是调用 Admin 的 alterPartitionReassignments 方法执行分区副本重分配时，可能触发此类选举。假设原来的AR是","position":{"start":{"line":46,"column":3,"offset":1550},"end":{"line":46,"column":139,"offset":1686},"indent":[]}},{"type":"linkReference","identifier":"1，2，3","label":"1，2，3","referenceType":"shortcut","children":[{"type":"text","value":"1，2，3","position":{"start":{"line":46,"column":140,"offset":1687},"end":{"line":46,"column":145,"offset":1692},"indent":[]}}],"position":{"start":{"line":46,"column":139,"offset":1686},"end":{"line":46,"column":146,"offset":1693},"indent":[]}},{"type":"text","value":"，Leader 是1，当执行副本重分配后，副本集合AR被设置成","position":{"start":{"line":46,"column":146,"offset":1693},"end":{"line":46,"column":177,"offset":1724},"indent":[]}},{"type":"linkReference","identifier":"4，5，6","label":"4，5，6","referenceType":"shortcut","children":[{"type":"text","value":"4，5，6","position":{"start":{"line":46,"column":178,"offset":1725},"end":{"line":46,"column":183,"offset":1730},"indent":[]}}],"position":{"start":{"line":46,"column":177,"offset":1724},"end":{"line":46,"column":184,"offset":1731},"indent":[]}},{"type":"text","value":"，显然，Leader必须要变更，此时会发生 Reassign Partition Leader 选举。","position":{"start":{"line":46,"column":184,"offset":1731},"end":{"line":46,"column":235,"offset":1782},"indent":[]}}],"position":{"start":{"line":46,"column":3,"offset":1550},"end":{"line":46,"column":235,"offset":1782},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1548},"end":{"line":46,"column":235,"offset":1782},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"PreferredReplicaPartition Leader选举：当你手动运行 kafka-preferred-replica-election 命令，或自动触发了 Preferred Leader 选举时，该类策略被激活。所谓的 Preferred Leader，指的是 AR 中的第一个副本。比如 AR 是","position":{"start":{"line":47,"column":3,"offset":1785},"end":{"line":47,"column":160,"offset":1942},"indent":[]}},{"type":"linkReference","identifier":"3，2，1","label":"3，2，1","referenceType":"shortcut","children":[{"type":"text","value":"3，2，1","position":{"start":{"line":47,"column":161,"offset":1943},"end":{"line":47,"column":166,"offset":1948},"indent":[]}}],"position":{"start":{"line":47,"column":160,"offset":1942},"end":{"line":47,"column":167,"offset":1949},"indent":[]}},{"type":"text","value":"，那么，Preferred Leader就是3。","position":{"start":{"line":47,"column":167,"offset":1949},"end":{"line":47,"column":191,"offset":1973},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":1785},"end":{"line":47,"column":191,"offset":1973},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1783},"end":{"line":47,"column":191,"offset":1973},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"ControlledShutdownPartition Leader 选举：当 Broker 正常关闭时，该 Broker上 的所有 Leader 副本都会下线，因此，需要为受影响的分区执行相应的 Leader 选举。","position":{"start":{"line":48,"column":3,"offset":1976},"end":{"line":48,"column":112,"offset":2085},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":1976},"end":{"line":48,"column":112,"offset":2085},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":1974},"end":{"line":48,"column":112,"offset":2085},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1440},"end":{"line":48,"column":112,"offset":2085},"indent":[1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":48,"column":112,"offset":2085}}}}