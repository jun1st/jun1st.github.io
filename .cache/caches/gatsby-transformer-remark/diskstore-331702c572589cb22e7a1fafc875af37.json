{"expireTime":9007200859284084000,"key":"transformer-remark-markdown-html-db5eec35dfb3dbc925072dfc14373245-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<h2 id=\"什么是-clickhouse？\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-clickhouse%EF%BC%9F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是 ClickHouse？</h2>\n<p>ClickHouse 是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS)。</p>\n<p>在传统的行式数据库系统中,处于同一行中的数据总是被物理的存储在一起。在列式数据库中，数据库总是将同一列的数据存储在一起，不同列的数据也总是分开存储。</p>\n<p>不同的存储方式适合不同的场景，这里的查询场景包括： 进行了哪些查询，多久查询一次以及各类查询的比例； 每种查询读取多少数据————行、列和字节；读取数据和写入数据之间的关系；使用的数据集大小以及如何使用本地的数据集；是否使用事务,以及它们是如何进行隔离的；数据的复制机制与数据的完整性要求；每种类型的查询要求的延迟与吞吐量等等。</p>\n<p>系统负载越高，根据使用场景进行定制化就越重要，并且定制将会变的越精细。没有一个系统同样适用于明显不同的场景。如果系统适用于广泛的场景，在负载高的情况下，所有的场景可以会被公平但低效处理，或者高效处理一小部分场景。</p>\n<h3 id=\"olap-场景的关键特征\"><a href=\"#olap-%E5%9C%BA%E6%99%AF%E7%9A%84%E5%85%B3%E9%94%AE%E7%89%B9%E5%BE%81\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OLAP 场景的关键特征</h3>\n<ul>\n<li>大多数是读请求</li>\n<li>数据总是以相当大的批(> 1000 rows)进行写入</li>\n<li>不修改已添加的数据</li>\n<li>每次查询都从数据库中读取大量的行，但是同时又仅需要少量的列</li>\n<li>宽表，即每个表包含着大量的列</li>\n<li>较少的查询(通常每台服务器每秒数百个查询或更少)</li>\n<li>对于简单查询，允许延迟大约 50 毫秒</li>\n<li>列中的数据相对较小： 数字和短字符串(例如，每个 URL 60 个字节)</li>\n<li>处理单个查询时需要高吞吐量（每个服务器每秒高达数十亿行）</li>\n<li>事务不是必须的</li>\n<li>对数据一致性要求低</li>\n<li>每一个查询除了一个大表外都很小</li>\n<li>查询结果明显小于源数据，换句话说，数据被过滤或聚合后能够被盛放在单台服务器的内存中</li>\n</ul>\n<p>很容易可以看出，OLAP 场景与其他流行场景(例如,OLTP 或 K/V)有很大的不同， 因此想要使用 OLTP 或 Key-Value 数据库去高效的处理分析查询是没有意义的，例如，使用 OLAP 数据库去处理分析请求通常要优于使用 MongoDB 或 Redis 去处理分析请求。</p>\n<h2 id=\"第一次安装测试-clickhouse\"><a href=\"#%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95-clickhouse\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第一次安装测试 clickhouse</h2>\n<p>首次安装测试，用 docker 来得最方便了，yandex 提供了官方的 docker 镜像</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> <span class=\"token environment constant\">$HOME</span>/some_clickhouse_database\ndocker run -d --name some-clickhouse-server --ulimit <span class=\"token assign-left variable\">nofile</span><span class=\"token operator\">=</span><span class=\"token number\">262144</span>:262144 --volume<span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/some_clickhouse_database:/var/lib/clickhouse yandex/clickhouse-server</code></pre></div>\n<p>这里指定了本地的一个目录，加载到 docker 容器环境里来存储数据。因为 clickhouse 用到的测试数据一般都比较多，倒入测试数据是一项比较重的工作，因此最好保存在本地，而不依赖于容器环境。</p>\n<p>容器启动之后，怎么访问呢？ 最简单的就是进入这个容器的环境，运行 clickhouse-client</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token builtin class-name\">exec</span> -it some-clickhouse-server <span class=\"token function\">bash</span></code></pre></div>\n<p>进入容器之后，来到 /etc/clickhouse-server/ 目录下，把 config.xml 复制到本地计算机上，然后在本地修改这个文件，取消注释这行配置，开启主机监听，方便通过 GUI 程序来访问。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&lt;</span>listen_host<span class=\"token operator\">></span><span class=\"token number\">0.0</span>.0.<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&lt;</span>/listen_host<span class=\"token operator\">></span></code></pre></div>\n<p>把原来的容器删了，加载在本地的配置文件，</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -d --name clickhouse-server --ulimit <span class=\"token assign-left variable\">nofile</span><span class=\"token operator\">=</span><span class=\"token number\">262144</span>:262144 --volume<span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/clickhouse_database:/var/lib/clickhouse  -v ~/Documents/clickhouse/config.xml:/etc/clickhouse-server/config.xml yandex/clickhouse-server</code></pre></div>\n<h3 id=\"安装-tabix-来连接管理-clickhouse\"><a href=\"#%E5%AE%89%E8%A3%85-tabix-%E6%9D%A5%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86-clickhouse\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装 Tabix 来连接管理 clickhouse</h3>\n<p>Tabix 是这次我选用的管理工具，他是一个 web 站点，安装和使用都比较简单，甚至可以作为 clickhouse 的内嵌使用， UI 界面也同样优秀。 我在本机还是使用最方便的 docker 容器来跑。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run -d -p <span class=\"token number\">8080</span>:80 spoonest/clickhouse-tabix-web-client</code></pre></div>\n<p>在本机访问 localhost:8080, 默认用户名 defaut，密码为空，</p>\n<p><img src=\"/static/assets/images/tabix-ui.png\" alt=\"tabix ui\"></p>\n<p>开始吧</p>"}