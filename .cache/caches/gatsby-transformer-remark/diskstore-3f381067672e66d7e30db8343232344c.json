{"expireTime":9007200836384369000,"key":"transformer-remark-markdown-html-2968ccd6006fbd9383678d562f71d1ea-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<p>系统已经微服务化了，并且使用 Eureka 来做了服务的发现与治理。那么接下去的问题就是如何把服务暴露给外部终端使用了。</p>\n<p>把所有的 Api Endpoint 都暴露出去吗？如何做请求验证呢？ 如果把所有的 Api Endpoint 都暴露出去，在每个 Api Endpoint\n都做一次 AccessToken 验证码？并且终端请求 Api 的粒度和微服务提供的粒度是不一致的。比如：请求一个用户的 Profile 数据，\n终端需要的可能是个人信息，账户信息，近期订单信息等。 而在三个信息分别有三个微服务提供，让客户端请求三次吗？</p>\n<p><strong>Api Gateway</strong></p>\n<p>实现一个 Api Gateway 作为一个统一的入口，并且能够把请求转发到背后相应的微服务端。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*UT0vkwQSbCH5rQMia4sojg.png\"></p>\n<p><strong>用 Zuul 实现 Api Gateway</strong></p>\n<p>用 zuul 能非常快速的实现一个 Api Gateway，同时能和 Eureka 很好的集成。</p>\n<p>建立一个 Spring Boot Application，添加 Eureka Client 和 Zuul 相关的依赖</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;\n&lt;/dependency&gt;</code></pre></div>\n<p>在 Application 上开启 EnableDiscoveryClient 和 ZuulProxy</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@SpringBootApplication\n@EnableDiscoveryClient\n@EnableZuulProxy\n@RestController\npublic class GatewayApplication {\n\n    @Autowired\n    private DiscoveryClient discoveryClient;\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n\n    @GetMapping(&quot;/&quot;)\n    public String home() {\n        List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(&quot;SERVICE-PROVIDER&quot;);\n\n        if(list != null &amp;&amp; list.size() &gt; 0 )\n        {\n            return list.get(0).getUri().toString() + &quot;: new 2&quot;;\n        }\n\n        return &quot;cannot found consultants&quot;;\n    }\n}</code></pre></div>\n<p>在代码里，我们用 <code class=\"language-text\">discoveryClient</code> 从 Eureka Server 那里查询是否有注册为 <code class=\"language-text\">service-provider</code> 的微服务。</p>\n<p>打开首页：</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*Wktlsidrk8FadV8DSku9Lw.png\"></p>\n<p>这里现实的信息和 Eureka Server 上注册的信息一致，</p>\n<p>说能从 Eureka Server 发现微服务信息成功。 并且 Zuul 会默认把发现的微服务，通过 zuul 暴露给外部调用：</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*4ebYDW4h_TfG_JlWHL325g.png\"></p>\n<p>这里我们通过访问 gateway application 的 <code class=\"language-text\">service-provider</code> , zuul 会把这个请求转发给\nservice-provider 服务，并且返回结果，</p>\n<p>跟直接访问，两者一样。</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*hbk6Q63f9hOYvCzNcjyTQw.png\"></p>\n<p>到这里，一个简单的微服务应用就跑起来了， 哈利路亚</p>\n<p>Github demo 地址： <a href=\"https://github.com/jun1st/gateway\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gateway</a></p>"}