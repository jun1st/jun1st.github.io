{"componentChunkName":"component---src-templates-blog-post-js","path":"/aws-s4-signing-with-authorization-header/","result":{"data":{"site":{"siteMetadata":{"title":"fengd's zone","author":"fengd"}},"markdownRemark":{"id":"b6e05b15-e5fb-5455-ad37-898d27644352","html":"<h2 id=\"计算-s4-签名\"><a href=\"#%E8%AE%A1%E7%AE%97-s4-%E7%AD%BE%E5%90%8D\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>计算 S4 签名</h2>\n<p>想要直接在客户端上传文件到 AWS S3，需要通过计算基于 S4 的签名</p>\n<p>AWS 的签名计算已经更新到第四版了，标准的步骤还是跟之前的版本差不多，分为 4 步：</p>\n<ol>\n<li>发起一个请求</li>\n<li>根据请求和相关的信息，计算出一个需要进行签名的字符串</li>\n<li>根据 aws 提供的 access key 推导出一个签名用的 key，然后用这个签名的 key 给第二步中计算的字符串进行签名，计算出一个签名</li>\n<li>把签名返回给客户端，客户端带着这个签名进行操作</li>\n</ol>\n<p><a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS\n官方的参考文档在这里</a></p>\n<hr>\n<h4 id=\"创建请求\"><a href=\"#%E5%88%9B%E5%BB%BA%E8%AF%B7%E6%B1%82\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>创建请求</h4>\n<p>客户端需要提交给计算签名 Api 的数据有 3 个</p>\n<ol>\n<li>需要上传的内容的 hash 值</li>\n<li>需要上传内容的长度</li>\n<li>上传内容的类型</li>\n<li>其它自定义数据</li>\n</ol>\n<p>签名 API 根据客户端提供的数据，计算出一个唯一的 endpoint url， 稍后需要返回给客户端用，同时这个 endpoint url 还需要用在签名里。</p>\n<h4 id=\"计算签名\"><a href=\"#%E8%AE%A1%E7%AE%97%E7%AD%BE%E5%90%8D\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>计算签名</h4>\n<ol>\n<li>计算 Canonicalized Header Names</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*XGhOOWr2NJidO3EinTdb1g.png\"></p>\n<ol start=\"2\">\n<li>计算 Canonicalized Headers</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*uP31LFBqE1hV3AxMyKCHKw.png\"></p>\n<ol start=\"3\">\n<li>计算 Canonical Request</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*tM8i5zHplSHNoIPePbLzOg.png\"></p>\n<ol start=\"4\">\n<li>计算待签名字符串</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*lf5SDGh1Cfa3X_0Q04gYiw.png\"></p>\n<ol start=\"5\">\n<li>计算 Signing Key</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*Ms18UI2werMOaRQtNSo4dQ.png\"></p>\n<p>这里 SCHEME 就是 AWS4, TERMINATOR 是 aws4_request, serviceName 是 s3, regionName 就是 你的\nbucket 或者别的 service 所在的 region</p>\n<ol start=\"6\">\n<li>\n<p>计算 Signature</p>\n<p>byte[] signature =\n(stringToSign, kSigning, “HmacSHA256”);</p>\n</li>\n</ol>\n<p>最后，拼成完成的 authorization header 返回：</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*wclU8vz3mMJrCRbBQRk4Ng.png\"></p>\n<p>authorizationHeader 就是最后的结果～</p>\n<hr>\n<h4 id=\"客户端调用\"><a href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B0%83%E7%94%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>客户端调用</h4>\n<p>最后在客户端调用的时候，需要使用在计算签名时返回的 url 作为 endpoint， 并且，签名时所使用到的 header 一个都不能少</p>\n<p>所有用到的代码都在这里：\n<a href=\"https://gist.github.com/jun1st/b5b1f0b0bac37e30f279659a6f091fca\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gists</a></p>","timeToRead":2,"frontmatter":{"title":"AWS S4 Signing With Authorization Header","date":"July 07, 2018","spoiler":"AWS S4 Signing With Authorization Header"},"fields":{"slug":"/aws-s4-signing-with-authorization-header/","langKey":"en"}}},"pageContext":{"slug":"/aws-s4-signing-with-authorization-header/","previous":{"fields":{"slug":"/spring-cloud-microservices-eureka-client/","langKey":"en","directoryName":"spring-cloud-microservices-eureka-client"},"frontmatter":{"title":"使用 Spring Cloud 构建微服务之调用 Eureka Client"}},"next":{"fields":{"slug":"/publish-your-jar-to-maven-central/","langKey":"en","directoryName":"publish-your-jar-to-maven-central"},"frontmatter":{"title":"发布你的第一个 Maven Jar 库到 Maven 中央仓库"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}